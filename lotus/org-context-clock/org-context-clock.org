#+TITLE org context clock
#+PROPERTY: header-args :tangle yes :padline ys :comments both :noweb yes

* Org context clock
A context based clocking

** Preamble

#+BEGIN_SRC  emacs-lisp
;;; org-context-clock.el --- org-context-clock               -*- lexical-binding: t; -*-

;; Copyright (C) 2016  sharad

;; Author: s <>
;; Keywords: convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

#+END_SRC


#+BEGIN_SRC  emacs-lisp
(defgroup org-context-clock nil
  "Emacs Org Context Clocking."
  :tag "Org Clock"
  :group 'org-progress)

#+END_SRC

** TODO spaceline-org-clock-format-function
#+BEGIN_SRC elisp :tangle no
(defun org-clock-get-clock-string ()
  "Form a clock-string, that will be shown in the mode line.
If an effort estimate was defined for the current item, use
01:30/01:50 format (clocked/estimated).
If not, show simply the clocked time like 01:50."
  (let ((clocked-time (org-clock-get-clocked-time)))
    (if org-clock-effort
	(let* ((effort-in-minutes (org-duration-to-minutes org-clock-effort))
	       (work-done-str
		(propertize (org-duration-from-minutes clocked-time)
			    'face
			    (if (and org-clock-task-overrun
				     (not org-clock-task-overrun-text))
				'org-mode-line-clock-overrun
			      'org-mode-line-clock)))
	       (effort-str (org-duration-from-minutes effort-in-minutes)))
	  (format (propertize " [%s/%s] (%s)" 'face 'org-mode-line-clock)
		  work-done-str effort-str org-clock-heading))
      (format (propertize " [%s] (%s)" 'face 'org-mode-line-clock)
	      (org-duration-from-minutes clocked-time)
	      org-clock-heading))))
#+END_SRC
** Required libraries

 #+BEGIN_SRC  emacs-lisp
    (require 'org-clock)

    (require 'timer-utils-lotus)
    (eval-when-compile
      (require 'timer-utils-lotus))
    (require 'org-misc-utils-lotus)
    (eval-when-compile
      (require 'org-misc-utils-lotus))
    (require 'lotus-misc-utils)
    (eval-when-compile
      (require 'lotus-misc-utils))

   (require 'org-onchange)

   (eval-when-compile
       (require 'org-macs))
 #+END_SRC

** It is divided into multiple files for different functionality

#+BEGIN_SRC emacs-lisp
(require 'org-context-clock-api)
(require 'org-context-clock-api-list) ;; "org tasks access api for list org"
(require 'org-context-clock-api-recursive) ;; "org tasks access api for recursive task"
(require 'org-context-clock-api-interaction) ;; "Interactive utitlity API's for adding root subtree etc" ;; "org tasks clocking's API"
(require 'org-context-clock-assoc-predicate) ;; "org tasks associated to context predicate functions"
(require 'org-context-clock-assoc-rank) ;; "Org tasks associated to context rank functions"
(require 'org-context-clock-assoc-key) ;; "org tasks associated to context key functions on recursive taskinfos"

#+END_SRC

** Global variables
#+BEGIN_SRC emacs-lisp
(defvar *org-context-clock-task-current-context*  nil)
(defvar *org-context-clock-task-previous-context* nil)
(defvar *org-context-clock-clocked-dyntaskpl-context-history*  nil)
(defvar *org-context-clock-task-current-context-time-interval* 7)
(defvar *org-context-clock-last-buffer-select-time* (current-time))
(defvar *org-context-clock-buffer-select-timer* nil)
(defvar *org-context-clock-update-current-context-msg* "")
;; (defvar org-context-clock-api-name :predicate "API")
(defvar org-context-clock-access-api-name :recursive "Aceess API")
(defvar org-context-clock-assoc-api-name :keys "Assoc API")
(defvar org-context-clock-api-dyntaskpl-print                  (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskplprint))

;; deprecated
(defvar org-context-clock-api-dyntaskpls-associated-to-context (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpls))
(defvar org-context-clock-api-tasks-associated-to-context      (org-context-clock-access-api-get org-context-clock-access-api-name :tasks))
(defvar org-context-clock-build-dyntaskpl                      (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpl))
(defvar org-context-clock-matching-dyntaskpls                  (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpls))
(defvar org-context-clock-matching-tasks                       (org-context-clock-access-api-get org-context-clock-access-api-name :tasks))
(defvar org-context-clock-api-task-associated-to-context-p     (org-context-clock-assoc-api-get  org-context-clock-assoc-api-name :taskp))
(defvar org-context-clock-api-task-update-tasks                (org-context-clock-access-api-get org-context-clock-access-api-name :update))
(defvar org-context-clock-api-task-update-files                (org-context-clock-access-api-get org-context-clock-access-api-name :files))

#+END_SRC

** Simple function

#+BEGIN_SRC emacs-lisp
(defun custom-plist-keys (in-plist)
  (if (null in-plist)
      in-plist
      (cons (cl-first in-plist) (custom-plist-keys (nthcdr 2 in-plist)))))

#+END_SRC

** Disable for some time
#+BEGIN_SRC  emacs-lisp
(defun org-context-clock-disable-for (time)
  "Disable context clocking for TIME period."
  ;; Implement
  )
#+END_SRC

** Context clock API

#+BEGIN_SRC  emacs-lisp
;;;###autoload
(defun org-context-clock-api ()
  "org task clocking select api to use."
  (interactive)
  (let* ((assoc-api-keys (custom-plist-keys org-context-clock-task-clocking-assoc-api))
         (assoc-api-name (ido-completing-read
                          "org task clocking api name: "
                          (mapcar 'symbol-name assoc-api-keys)
                          nil
                          t
                          (symbol-name org-context-clock-assoc-api-name)))
         (assoc-api-key (intern assoc-api-name))

         (access-api-keys (custom-plist-keys org-context-clock-task-clocking-access-api))
         (access-api-name (ido-completing-read
                          "org task clocking api name: "
                          (mapcar 'symbol-name access-api-keys)
                          nil
                          t
                          (symbol-name org-context-clock-access-api-name)))
         (access-api-key (intern access-api-name)))
    (setq
     org-context-clock-assoc-api-name assoc-api-key
     org-context-clock-access-api-name access-api-key)
    (if (and
         (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskplprint)
         (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpl)
         (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpls)
         (org-context-clock-access-api-get org-context-clock-access-api-name :tasks)
         (org-context-clock-assoc-api-get org-context-clock-assoc-api-name :taskp)
         (org-context-clock-access-api-get org-context-clock-access-api-name :update))
        (setq
         org-context-clock-api-dyntaskpl-print                  (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskplprint)

         ;; deprecated
         org-context-clock-api-dyntaskpls-associated-to-context (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpls)
         org-context-clock-api-tasks-associated-to-context      (org-context-clock-access-api-get org-context-clock-access-api-name :tasks)
         org-context-clock-build-dyntaskpl                      (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpl)
         org-context-clock-matching-dyntaskpls                  (org-context-clock-access-api-get org-context-clock-access-api-name :dyntaskpls)
         org-context-clock-matching-tasks                       (org-context-clock-access-api-get org-context-clock-access-api-name :tasks)
         org-context-clock-api-task-associated-to-context-p     (org-context-clock-assoc-api-get org-context-clock-assoc-api-name :taskp)
         org-context-clock-api-task-update-tasks                (org-context-clock-access-api-get org-context-clock-access-api-name :update)))))

#+END_SRC

** Update tasks

#+BEGIN_SRC  emacs-lisp

  ;;;###autoload
  (defun org-context-clock-task-update-tasks (&optional force)
    "Update task infos"
    (interactive "P")
    (message "calling org-context-clock-task-update-tasks")
    (funcall org-context-clock-api-task-update-tasks force))

  ;;;###autoload
  (defun org-context-clock-task-update-files (&optional force)
    "Update task infos"
    (interactive "P")
    (funcall org-context-clock-api-task-update-files force))

  (defun org-context-clock-build-tasks (file)
    (when (member*
                file
                (org-context-clock-task-update-files)
                :test #'(lambda (f1 f2)
                          (string-equal
                           (file-truename f1)
                           (file-truename f2))))
      (org-context-clock-task-update-tasks t)))

  (defun org-context-clock-after-save-hook ()
    (when (and (eq major-mode 'org-mode)
               (buffer-file-name))
      (org-context-clock-build-tasks (buffer-file-name))))
#+END_SRC

*** TODO Add function to do updating if any of update-files were changes
use something

#+BEGIN_SRC emacs-lisp :tangle no
(save-buffer)
    (org-save-all-org-buffers)
#+END_SRC

it is currently getting used in clock-in-hook in org-lock-utils-lotus.el.

** Build context

#+BEGIN_SRC  emacs-lisp
  (defun org-context-clock-build-context (&optional buff)
    (let* ((buff (if buff
                     (if (bufferp buff)
                         buff
                         (if (stringp buff)
                             (or
                              (get-buffer buff)
                              (if (file-exists-p buff)
                                  (get-file-buffer buff)))))
                     (window-buffer)))
           (buf (org-base-buffer buf))
           (file (buffer-file-name buff))
           (context (list :file file :buffer buff)))
      context))

#+END_SRC

** Unnamed task related global variable
#+BEGIN_SRC  emacs-lisp
(defvar *org-context-clock-unassociate-context-start-time* nil)
(defvar *org-context-clock-swapen-unnamed-threashold-interval* (* 60 2)) ;2 mins

#+END_SRC

** Unnamed task functions
#+BEGIN_SRC  emacs-lisp
  (defun org-context-clock-unassociate-context-start-time-reset ()
    (setq *org-context-clock-unassociate-context-start-time* nil))

  (defun org-context-clock-can-create-unnamed-task-p ()
    (unless *org-context-clock-unassociate-context-start-time*
      (setq *org-context-clock-unassociate-context-start-time* (current-time)))
    (let ((unassociate-context-start-time *org-context-clock-unassociate-context-start-time*))
      (prog1
          (>
           (float-time (time-since unassociate-context-start-time))
           *org-context-clock-swapen-unnamed-threashold-interval*))))

  (defun org-clock-marker-is-unnamed-clock-p (&optional clock)
    (let ((clock (or clock org-clock-marker)))
      (when (and
             clock
             (lotus-org-unnamed-task-clock-marker))
       (equal
        (marker-buffer org-clock-marker)
        ;; id:x11 make org-context-clock version
        (marker-buffer (lotus-org-unnamed-task-clock-marker))))))

  (defun org-context-clock-maybe-create-clockedin-unnamed-heading ()
    (when (org-context-clock-can-create-unnamed-task-p)
      (let ((org-log-note-clock-out nil))
        (if (org-clock-marker-is-unnamed-clock-p)
            (org-context-clock-debug :debug "org-context-clock-maybe-create-unnamed-task: Already clockin unnamed task")
            (prog1
                (lotus-org-create-unnamed-task-task-clock-in)
              (org-context-clock-unassociate-context-start-time-reset))))))

  (defun org-context-clock-maybe-create-unnamed-heading ()
    (when (org-context-clock-can-create-unnamed-task-p)
      (let ((org-log-note-clock-out nil))
        (if (org-clock-marker-is-unnamed-clock-p)
            (org-context-clock-debug :debug "org-context-clock-maybe-create-unnamed-task: Already clockin unnamed task")
            (rest (lotus-org-create-unnamed-task))))))


  (defun org-context-clock-maybe-create-unnamed-task ()
    ;; back
    (let* ((unnamed-heading-marker
           (rest (lotus-org-create-unnamed-task)))
          (unnamed-task
           (when unnamed-heading-marker
             (with-current-buffer (marker-buffer unnamed-heading-marker)
               (goto-char unnamed-heading-marker)
               (org-context-clock-collect-task)))))
      unnamed-task))

  (defun org-context-clock-maybe-create-unnamed-dyntaskpl (context)
    ;; back
    (let* ((unnamed-task
           (org-context-clock-maybe-create-unnamed-task))
          (unnamed-dyntaskpl
           (if unnamed-task
             (org-context-clock-build-dyntaskpl unnamed-task context))))
      unnamed-dyntaskpl))

  (defun org-context-clock-maybe-create-clockedin-unnamed-dyntaskpl (context)
    ;; back
    (when (org-context-clock-can-create-unnamed-task-p)
      (let ((org-log-note-clock-out nil))
        (if (org-clock-marker-is-unnamed-clock-p)
            (org-context-clock-debug :debug "org-context-clock-maybe-create-unnamed-task: Already clockin unnamed task")
            (let* ((unnamed-dyntaskpl (org-context-clock-maybe-create-unnamed-dyntaskpl context))
                   (unnamed-task (plist-get unnamed-dyntaskpl :task))
                   (unnamed-marker (plist-get unnamed-task :task-clock-marker)))
              (prog1
                  (org-context-clock-clockin-dyntaskpl unnamed-dyntaskpl)
                ;; id:x11 make org-context-clock version
                (lotus-org-unnamed-task-clock-marker unnamed-marker)
                (message "clockin to unnnamed task.")
                (org-context-clock-unassociate-context-start-time-reset)))))))

  (defun org-context-clock-changable-p ()
    "Stay with a clock at least 2 mins."
    (if org-clock-start-time
        (let ((clock-duration
               (if (and
                    (stringp org-clock-start-time)
                    (string-equal "" org-clock-start-time))
                   0
                   (float-time (time-since org-clock-start-time)))))
          (or
           (< clock-duration 60)
           (> clock-duration 120)))
        t))

#+END_SRC

** Main context clock function update-current-context
#+BEGIN_SRC  emacs-lisp
      ;;;###autoload
      (defun org-context-clock-update-current-context (&optional force)
        (interactive "P")
        (if (>
             (float-time (time-since *org-context-clock-last-buffer-select-time*))
             *org-context-clock-task-current-context-time-interval*)
            (let* ((context (org-context-clock-build-context))
                   (buff    (plist-get context :buffer)))
              (setq *org-context-clock-task-current-context*  context)
              (if (and
                   (org-context-clock-changable-p)
                   buff (buffer-live-p buff)
                   (not (minibufferp buff))
                   (not              ;BUG: Reconsider whether it is catching case after some delay.
                    (equal *org-context-clock-task-previous-context* *org-context-clock-task-current-context*)))

                  (progn
                    (setq
                     *org-context-clock-task-previous-context* *org-context-clock-task-current-context*)
                    (if (and
                         (not (org-clock-marker-is-unnamed-clock-p))
                         (> (org-context-clock-current-task-associated-to-context-p context) 0))
                        (progn
                          (org-context-clock-debug :debug "org-context-clock-update-current-context: Current task already associate to %s" context))
                        (progn                ;current clock is not matching
                          (org-context-clock-debug :debug "org-context-clock-update-current-context: Now really going to clock.")
                          (unless (org-context-clock-dyntaskpl-run-associated-dyntaskpl context)
                            ;; not able to find associated, or intentionally not selecting a clock
                            (org-context-clock-debug :debug "trying to create unnamed task.")
                            (org-context-clock-maybe-create-clockedin-unnamed-dyntaskpl context))
                          (org-context-clock-debug :debug "org-context-clock-update-current-context: Now really clock done."))))

                  (org-context-clock-debug :debug "org-context-clock-update-current-context: context %s not suitable to associate" context)))
            (org-context-clock-debug :debug "org-context-clock-update-current-context: not enough time passed.")))


      (defun org-context-clock-update-current-context-x (force)
        (interactive "P")
        (if t
            (let* ((context (org-context-clock-build-context)))
              (unless nil
                (setq
                 *org-context-clock-task-previous-context* *org-context-clock-task-current-context*
                 *org-context-clock-task-current-context*  context)

                (unless (and
                         (not (org-clock-marker-is-unnamed-clock-p))
                         (> (org-context-clock-current-task-associated-to-context-p context) 0))
                  (unless (org-context-clock-dyntaskpl-run-associated-dyntaskpl context)
                    (org-context-clock-debug :debug "trying to create unnamed task.")
                    ;; not able to find associated, or intentionally not selecting a clock
                    (org-context-clock-maybe-create-clockedin-unnamed-dyntaskpl context)))))))

#+END_SRC

** Create task info out of current clock
When org-clock-marker was hidden that time (org-context-clock-collect-task) not able to
collect correct task, so here cloned buffer need to be created.
see here[[https://emacs.stackexchange.com/questions/9530/how-can-i-get-an-org-mode-outline-in-a-2nd-buffer-as-a-dynamic-table-of-contents][ How can I get an org-mode outline in a 2nd buffer as a dynamic table of contents?]]

#+BEGIN_SRC  emacs-lisp
  ;;;###autoload
  (defun org-context-clock-task-current-task ()
    (when (and
           org-clock-marker
           (markerp org-clock-marker)
           (> (or (marker-position org-clock-marker) 0) 0))
      (org-with-cloned-marker org-clock-marker "<tree>"
        (let ((view-read-only nil)
              (buffer-read-only t))
          (read-only-mode)
          (org-previous-visible-heading 1)
          (let ((info (org-context-clock-collect-task)))
            info)))))


#+END_SRC

** Context and Task relater tester and collector functions
*** Test if TASK is associate to CONTEXT
 #+BEGIN_SRC  emacs-lisp
 (defun org-context-clock-task-associated-to-context-p (task context)
   (if task
       (funcall org-context-clock-api-task-associated-to-context-p task context)
       0))
#+END_SRC

*** Collect and return task matching to CONTEXT
#+BEGIN_SRC  emacs-lisp
 ;;;###autoload
 (defun org-context-clock-current-task-associated-to-context-p (context)
   (let ((task (org-context-clock-task-current-task)))
     (org-context-clock-task-associated-to-context-p task context)))

#+END_SRC

** TODO add org-insert-log-not
#+BEGIN_SRC  emacs-lisp
  (defun org-context-clock-clockin-dyntaskpl (new-dyntaskpl)
    ;;TODO add org-insert-log-not
    (org-context-clock-debug :debug "org-context-clock-clockin-marker %s" new-dyntaskpl)
    (let* (retval
           (old-dyntaskpl (cl-first *org-context-clock-clocked-dyntaskpl-context-history*))
           (old-task    (plist-get old-dyntaskpl :task))
           (old-marker  (or (if old-task (plist-get old-task :task-clock-marker)) org-clock-hd-marker))
           (old-heading (if old-task (plist-get old-task :task-clock-heading)))
           (new-task    (plist-get new-dyntaskpl :task))
           (new-marker  (if new-task (plist-get new-task :task-clock-marker)))
           (new-heading (if new-task (plist-get new-task :task-clock-heading))))
    (when (and
           new-marker
           (marker-buffer new-marker))

      (let* ((org-log-note-clock-out nil)
             (old-marker org-clock-marker)
             (old-buff   (marker-buffer old-marker)))

        (org-context-clock-debug :debug "clocking in %s" new-marker)

        (let ((old-buff-read-only
               (if old-buff
                   (with-current-buffer (marker-buffer old-marker)
                     buffer-read-only))))

          (if old-buff
              (with-current-buffer old-buff
                (setq buffer-read-only nil)))

          (setq *org-context-clock-update-current-context-msg* old-marker)

          (when (and
                 new-heading
                 old-marker
                 (marker-buffer old-marker))
            (org-insert-log-note old-marker (format "clocking out to clockin to <%s>" new-heading)))

          (with-current-buffer (marker-buffer new-marker)
            (let ((buffer-read-only nil))
              (when old-heading
                (org-insert-log-note new-marker (format "clocking in to here from last clock <%s>" old-heading)))
              (condition-case err
                  (progn
                    (org-clock-clock-in (list new-marker))
                    (setq retval t)
                    (push new-dyntaskpl *org-context-clock-clocked-dyntaskpl-context-history*))
                ((error)
                 (progn
                   (setq retval nil)
                   (signal (cl-first err) (rest err)))))))
          (if old-buff
              (with-current-buffer old-buff
                (setq buffer-read-only old-buff-read-only)))
          retval)))))
#+END_SRC

*** Clock-into one of associated tasks
#+BEGIN_SRC  emacs-lisp

        ;;;###autoload
  (defun org-context-clock-dyntaskpl-run-associated-dyntaskpl (context)
    "marker and ranked version"
    (interactive
     (list (org-context-clock-build-context)))
    (progn
      (let* ((context (or context (org-context-clock-build-context)))
             (matched-dyntaskpls
              (remove-if-not
               #'(lambda (dyntaskpl)
                   (and
                    (plist-get dyntaskpl :marker)
                    (marker-buffer (plist-get dyntaskpl :marker))))
               (org-context-clock-dyntaskpls-associated-to-context-filtered context))))
        (if matched-dyntaskpls
            (let* ((sel-dyntaskpl
                    (if (> (length matched-dyntaskpls) 1)
                        (sacha/helm-select-dyntaskpl-timed matched-dyntaskpls)
                        (cl-first matched-dyntaskpls)))
                   ;; (sel-task   (if sel-dyntaskpl (plist-get sel-dyntaskpl :task)))
                   ;; (sel-marker (if sel-task      (plist-get sel-task      :task-clock-marker)))
                   )
              ;; (org-context-clock-message 6 "sel-dyntaskpl %s sel-task %s sel-marker %s" sel-dyntaskpl sel-task sel-marker)
              (if sel-dyntaskpl (org-context-clock-clockin-dyntaskpl sel-dyntaskpl)))
            (progn
              ;; here create unnamed task, no need
              (setq *org-context-clock-update-current-context-msg* "null clock")
              (org-context-clock-message 6
                                         "No clock found please set a match for this context %s, add it using M-x org-context-clock-add-context-to-org-heading."
                                         context)
              (org-context-clock-add-context-to-org-heading-when-idle context 7)
              nil)))))

  (when nil                               ;testing
    (sacha/helm-select-dyntaskpl-timed
     (remove-if-not
      #'(lambda (dyntaskpl)
          (and
           (plist-get dyntaskpl :marker)
           (marker-buffer (plist-get dyntaskpl :marker))))
      (org-context-clock-dyntaskpls-associated-to-context-filtered (org-context-clock-build-context))))
    )

#+END_SRC

** function to setup context clock timer

#+BEGIN_SRC  emacs-lisp

;;;###autoload
(defun org-context-clock-run-task-current-context-timer ()
  (interactive)
  (progn
  (setq *org-context-clock-last-buffer-select-time* (current-time))
    (when *org-context-clock-buffer-select-timer*
      (cancel-timer *org-context-clock-buffer-select-timer*)
      (setq *org-context-clock-buffer-select-timer* nil))
    (setq *org-context-clock-buffer-select-timer*
          ;; distrubing while editing.
          ;; run-with-timer
          (run-with-idle-timer
          (1+ *org-context-clock-task-current-context-time-interval*)
          nil
          'org-context-clock-update-current-context))))

#+END_SRC


#+BEGIN_SRC  emacs-lisp

     (defun sacha-org-context-clock-selection-line (marker)
      "Insert a line for the clock selection menu.
  And return a cons cell with the selection character integer and the marker
  pointing to it."
      (when (marker-buffer marker)
        (with-current-buffer (org-base-buffer (marker-buffer marker))
          (org-with-wide-buffer
           (progn ;; ignore-errors
             (goto-char marker)
             (let* ((cat (org-get-category))
                    (heading (org-get-heading 'notags))
                    (prefix (save-excursion
                              (org-back-to-heading t)
                              (looking-at org-outline-regexp)
                              (match-string 0)))
                    (task (substring
                           (org-fontify-like-in-org-mode
                            (concat prefix heading)
                            org-odd-levels-only)
                           (length prefix))))
               (when task ;; (and cat task)
                 ;; (insert (format "[%c] %-12s  %s\n" i cat task))
                 ;; marker
                 (cons task marker))))))))

     (defun sacha-org-context-clock-dyntaskpl-selection-line (dyntaskpl)
      "Insert a line for the clock selection menu.
  And return a cons cell with the selection character integer and the marker
  pointing to it."
      (let ((marker (plist-get dyntaskpl :marker))
            (rank   (plist-get dyntaskpl :rank)))
        (when (marker-buffer marker)
          (with-current-buffer (org-base-buffer (marker-buffer marker))
            (org-with-wide-buffer
             (progn ;; ignore-errors
               (goto-char marker)
               (let* ((cat (org-get-category))
                      (heading (org-get-heading 'notags))
                      (prefix (save-excursion
                                (org-back-to-heading t)
                                (looking-at org-outline-regexp)
                                (match-string 0)))
                      (task (substring
                             (org-fontify-like-in-org-mode
                              (concat prefix heading)
                              org-odd-levels-only)
                             (length prefix))))
                 (when task ;; (and cat task)
                   ;; (insert (format "[%c] %-12s  %s\n" i cat task))
                   ;; marker
                   (cons (org-context-clock-dyntaskpl-print dyntaskpl task) dyntaskpl)))))))))


  (defun sacha-org-context-clock-dyntaskpl-selection-line (dyntaskpl)
      "Insert a line for the clock selection menu.
  And return a cons cell with the selection character integer and the marker
  pointing to it."
      (cons (org-context-clock-dyntaskpl-print dyntaskpl nil) dyntaskpl))
#+END_SRC


#+BEGIN_SRC  emacs-lisp
  ;; rank based
    (defun sacha/helm-select-dyntaskpl (dyntaskpls)
      ;; (org-context-clock-debug :debug "sacha marker %s" (cl-first dyntaskpls))
      (helm
       (list
        (helm-build-sync-source "Select matching tasks"
          :candidates (mapcar 'sacha-org-context-clock-dyntaskpl-selection-line dyntaskpls)
          :action (list ;; (cons "Select" 'identity)
                   (cons "Clock in and track" #'identity))
          :history 'org-refile-history)
        ;; (helm-build-dummy-source "Create task"
        ;;   :action (helm-make-actions
        ;;            "Create task"
        ;;            'sacha/helm-org-create-task))
        )))

    (defun sacha/helm-select-dyntaskpl-timed (dyntaskpls)
      (helm-timed 7 nil
        (message "running sacha/helm-select-clock")
        (sacha/helm-select-dyntaskpl dyntaskpls)))

    (defun sacha/helm-dyntaskpl-action (dyntaskpls clockin-fn)
      ;; (message "sacha marker %s" (cl-first dyntaskpls))
      ;; (setq sacha/helm-org-refile-locations tbl)
      (progn
        (helm
         (list
          (helm-build-sync-source "Select matching tasks"
            :candidates (mapcar 'sacha-org-context-clock-dyntaskpl-selection-line dyntaskpls)
            :action (list ;; (cons "Select" 'identity)
                          (cons "Clock in and track" #'(lambda (c) (funcall clockin-fn c))))
            :history 'org-refile-history)
          ;; (helm-build-dummy-source "Create task"
          ;;   :action (helm-make-actions
          ;;            "Create task"
          ;;            'sacha/helm-org-create-task))
          ))))



  ;; org-context-clock-dyntaskpl-run-associated-dyntaskpl

  ;; (sacha/helm-clock-action (org-context-clock-markers-associated-to-context (org-context-clock-build-context)) #'org-context-clock-clockin-marker)
  ;; (sacha/helm-select-clock (org-context-clock-markers-associated-to-context (org-context-clock-build-context)))
  ;; (sacha/helm-clock-action (org-context-clock-markers-associated-to-context (org-context-clock-build-context (find-file-noselect "~/.xemacs/elpa/pkgs/org-context-clock/org-context-clock.el"))))




#+END_SRC


#+BEGIN_SRC  emacs-lisp
   ;;;###autoload
   (defun org-context-clock-insinuate ()
     (interactive)
     (progn
       (add-hook 'buffer-list-update-hook     'org-context-clock-run-task-current-context-timer)
       (add-hook 'elscreen-screen-update-hook 'org-context-clock-run-task-current-context-timer)
       (add-hook 'elscreen-goto-hook          'org-context-clock-run-task-current-context-timer)
       (add-hook 'after-save-hook             'org-context-clock-after-save-hook nil t))

     (dolist (prop (org-context-clock-keys-with-operation :getter nil))
       (let ((propstr
              (upcase (if (keywordp prop) (substring (symbol-name prop) 1) (symbol-name prop)))))
         (unless (member propstr org-use-property-inheritance)
           (push propstr org-use-property-inheritance)))))

   ;;;###autoload
   (defun org-context-clock-uninsinuate ()
     (interactive)
     (progn
       (remove-hook 'buffer-list-update-hook 'org-context-clock-run-task-current-context-timer)
       ;; (setq buffer-list-update-hook nil)
       (remove-hook 'elscreen-screen-update-hook 'org-context-clock-run-task-current-context-timer)
       (remove-hook 'elscreen-goto-hook 'org-context-clock-run-task-current-context-timer)
       (remove-hook 'after-save-hook             'org-context-clock-after-save-hook t))

     (dolist (prop (org-context-clock-keys-with-operation :getter nil))
       (let ((propstr
              (upcase (if (keywordp prop) (substring (symbol-name prop) 1) (symbol-name prop)))))
         (unless (member propstr org-use-property-inheritance)
           (delete propstr org-use-property-inheritance)))))

#+END_SRC

** Test functions

#+BEGIN_SRC  emacs-lisp

 (progn ;; "Org task clock reporting"
   ;; #+BEGIN: task-clock-report-with-comment :parameter1 value1 :parameter2 value2 ...
   ;; #+END:
   (defun org-dblock-write:task-clock-report-with-comment (params)
     (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
       (insert "Last block update at: "
               (format-time-string fmt))))

   (progn ;; "time sheet"
     ))

#+END_SRC


#+BEGIN_SRC  emacs-lisp
 (when nil                               ;testing

   (org-context-clock-dyntaskpl-run-associated-dyntaskpl (org-context-clock-build-context))

   (org-context-clock-dyntaskpls-associated-to-context (org-context-clock-build-context))

    (remove-if-not
                 #'(lambda (dyntaskpl)
                     (and
                      (plist-get dyntaskpl :marker)
                      (marker-buffer (plist-get dyntaskpl :marker))))
                 (org-context-clock-dyntaskpls-associated-to-context (org-context-clock-build-context)))

   (org-context-clock-dyntaskpl-run-associated-dyntaskpl
    (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/report.org")))

   (org-context-clock-markers-associated-to-context
    (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/report.org")))

   (org-context-clock-current-task-associated-to-context-p
    (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/report.org")))

   (org-context-clock-markers-associated-to-context (org-context-clock-build-context))

   (org-context-clock-current-task-associated-to-context-p (org-context-clock-build-context))

   ;; sharad
   (setq test-info-task
         (let ((xcontext
                (list
                 :file (buffer-file-name)
                 :buffer (current-buffer))))
           (org-with-clock-position (list org-clock-marker)
             (org-previous-visible-heading 1)
             (let ((info (org-context-clock-collect-task)))
               (if (funcall org-context-clock-api-task-associated-to-context-p info xcontext)
                   info)))))

   (funcall org-context-clock-api-task-associated-to-context-p
            (org-context-clock-task-current-task)
            (org-context-clock-build-context))




   ;; (test-info-task)

   (funcall org-context-clock-api-task-associated-to-context-p
            test-info-task
            (org-context-clock-build-context))

   ;; org-clock-marker
   (org-tasks-associated-key-fn-value
    :current-clock test-info-task
    (org-context-clock-build-context) )

   (org-context-clock-current-task-associated-to-context-p
    (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/report.org")))

   (org-context-clock-current-task-associated-to-context-p
    (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/features/patch-mgm/todo.org")))


   (length
    (funcall org-context-clock-matching-tasks
             (org-context-clock-build-context)))

   (length
    (funcall org-context-clock-matching-tasks
             (org-context-clock-build-context (find-file-noselect "/home/s/paradise/releases/global/patch-upgrade/Makefile"))))

   (org-context-clock-markers-associated-to-context (org-context-clock-build-context))

   ;; test it
   (length
    (funcall org-context-clock-matching-tasks (org-context-clock-build-context)))

   (org-context-clock-task-get-property
    (cl-first (funcall org-context-clock-matching-tasks (org-context-clock-build-context)))
    :task-clock-marker)

   (org-context-clock-clockin-marker
    (org-context-clock-task-get-property
     (cl-first (funcall org-context-clock-matching-tasks (org-context-clock-build-context)))
     :task-clock-marker))

   (org-context-clock-task-associated-to-context-by-keys-p
    (cl-first (funcall org-context-clock-matching-tasks (org-context-clock-build-context)))
    (org-context-clock-build-context))

   (length
    (funcall org-context-clock-matching-tasks
             (org-context-clock-build-context (find-file-noselect "~/Documents/CreatedContent/contents/org/tasks/meru/report.org"))))

   (length
    (org-context-clock-tasks-associated-to-context-by-keys
     (org-context-clock-build-context)))

   (length
    (org-context-clock-tasks-associated-to-context-by-keys
     (org-context-clock-build-context (find-file-noselect "/home/s/paradise/releases/global/patch-upgrade/Makefile"))))

   (org-context-clock-current-task-associated-to-context-p
    (org-context-clock-build-context (find-file-noselect "/home/s/paradise/releases/global/patch-upgrade/Makefile")))

   ;; (org-context-clock-task-associated-to-context-by-keys "/home/s/paradise/releases/global/patch-upgrade/Makefile")

   (if (org-context-clock-current-task-associated-to-context-p (org-context-clock-build-context))
       (message
       "current clock is with current context or file"))

   (progn
       (sacha-org-context-clock-selection-line
       (car
    (remove-if-not
     #'(lambda (marker) (marker-buffer marker))
     (org-context-clock-markers-associated-to-context (org-context-clock-build-context))))))

   (org-base-buffer (marker-buffer (car
   (remove-if-not
   #'(lambda (marker) (marker-buffer marker))
   (org-context-clock-markers-associated-to-context (org-context-clock-build-context))))))



   (sacha/helm-clock-action
   (remove-if-not
   #'(lambda (marker) (marker-buffer marker))
   (org-context-clock-markers-associated-to-context (org-context-clock-build-context)))
   #'org-context-clock-clockin-marker))

#+END_SRC

** Provide this file
#+BEGIN_SRC  emacs-lisp

 (provide 'org-context-clock)
 ;;; org-context-clock.el ends here

 #+END_SRC
